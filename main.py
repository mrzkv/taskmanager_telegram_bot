import html
from asyncio import run, sleep
from idlelib.editor import keynames

from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import Command
from aiogram import types, F, Bot, Dispatcher
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from sys import exit
from admin_functions import *
from message_commands import *
from bot_token import *

dp = Dispatcher()
print('Format of info about users is Full_name:tgID')


#–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start
@dp.message(Command('start'))
async def start_bot(message: types.Message):
    full_name, user_id, username = message.from_user.full_name, message.from_user.id, message.from_user.username
    await add_user_to_data_base(user_id, full_name, username)
    print(f'{message.from_user.full_name}:{message.from_user.id} started this bot')

    kb = [
        [types.InlineKeyboardButton(text='–ú–µ–Ω—éüìñ', callback_data='main_menu')], # –ú–µ–Ω—é
        [
        types.InlineKeyboardButton(text='–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—èüë®‚Äçüíª', callback_data='information'), # –ò–Ω—Ñ–æ
        types.InlineKeyboardButton(text='–°–ø–∏—Å–æ–∫ –ê–¥–º–∏–Ω–æ–≤üëë', callback_data='list_of_admins') # –°–ø–∏—Å–æ–∫ –ê–¥–º
        ]]

    keyboard = types.InlineKeyboardMarkup(inline_keyboard=kb)
    photo_data = 'AgACAgIAAxkBAAM-Z16z72hLzyrNHk2HcW1004sAAc77AAJw5zEbQijxSkRj7ont7ywxAQADAgADeQADNgQ'
    text_data = f"\n<b>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {html.escape(message.from_user.full_name)}!</b>\n–ù–∏–∂–µ –∫–Ω–æ–ø–∫–∏ –∫–æ—Ç–æ—Ä—ã–µ –≤–∞–º –ø–æ–Ω–∞–¥–æ–±—è—Ç—Å—è\n"
    await message.answer_photo(photo=photo_data, caption=text_data, reply_markup=keyboard)


class Addtask(StatesGroup):
    addtask = State()

class Deltask(StatesGroup):
    deltask = State()

class AdminNews(StatesGroup):
    adm_newsletter = State()
#=====================================================================================# –ù–∞—á–∞–ª–æ –∫–æ–¥–∞ –æ—Å–Ω–æ–≤–∞–Ω–Ω–æ–≥–æ –Ω–∞ F.Data

# –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤, –∫–æ–≥–¥–∞ —á–µ–ª–æ–≤–µ–∫ –Ω–∞–∂–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É '–°–ø–∏—Å–æ–∫ –ê–¥–º–∏–Ω–æ–≤üëë'
@dp.callback_query( F.data == 'list_of_admins' )
async def admin_list(callback: types.CallbackQuery):
    kb = [
        [types.InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data="back_to_start")]
    ]
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=kb)
    text_data = '–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –¥–∞–Ω–Ω–æ–≥–æ –±–æ—Ç–∞:\n1.@Marzkvüëë'
    await callback.message.edit_caption(caption=text_data,reply_markup=keyboard)

# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ, –∫–æ–≥–¥–∞ —á–µ–ª–æ–≤–µ–∫ –Ω–∞–∂–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—èüë®‚Äçüíª'
@dp.callback_query( F.data == 'information' )
async def information(callback: types.CallbackQuery):
    kb = [[types.InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data="back_to_start")]]
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=kb)
    text_data = '1. –ó–∞–ø—É—Å–∫ –ø–µ—Ä–≤–æ–π –∞–¥–µ–∫–≤–∞—Ç–Ω–æ–π –±–µ—Ç–∞-–≤–µ—Ä—Å–∏–∏: 13.12.2024\n2. –ö–æ–Ω–µ—Ü –±–µ—Ç–∞-–≤–µ—Ä—Å–∏–∏ 14.12.2024\n3. –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ 15.12.2024!'
    await callback.message.edit_caption(caption=text_data, reply_markup=keyboard)

# –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –Ω–∞—á–∞–ª—å–Ω–æ–µ –º–µ–Ω—é
@dp.callback_query( F.data == 'back_to_start' )
async def start_bot_2(callback: types.CallbackQuery):
    kb = [
        [types.InlineKeyboardButton(text='–ú–µ–Ω—éüìñ', callback_data='main_menu')], # –ú–µ–Ω—é
        [types.InlineKeyboardButton(text='–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—èüë®‚Äçüíª', callback_data='information'),types.InlineKeyboardButton(text='–°–ø–∏—Å–æ–∫ –ê–¥–º–∏–Ω–æ–≤üëë', callback_data='list_of_admins')], # –ò–Ω—Ñ–æ , –°–ø–∏—Å–æ–∫ –∞–¥–º
    ]
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=kb)
    text_data = f"\n<b>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {html.escape(callback.from_user.full_name)}!</b>\n–ù–∏–∂–µ –∫–Ω–æ–ø–∫–∏ –∫–æ—Ç–æ—Ä—ã–µ –≤–∞–º –ø–æ–Ω–∞–¥–æ–±—è—Ç—Å—è\n"
    await callback.message.edit_caption(caption=text_data,reply_markup=keyboard)

@dp.callback_query( F.data == 'commands_of_bot')
async def cmdlist(callback: types.CallbackQuery):
    kb = [[types.InlineKeyboardButton(text='–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥', callback_data='main_menu')]]
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=kb)
    text_data = f'1./add - –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É.\n2. /list - –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á.\n3. /complete –∏–ª–∏ /del - –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É.\n4. /clist - –°–ø–∏—Å–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á.'
    await callback.message.edit_caption(caption=text_data, reply_markup=keyboard)

@dp.callback_query( F.data == 'main_menu' )
async def main_menu(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    kb = [
        [types.InlineKeyboardButton(text='–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ', callback_data='back_to_start'), types.InlineKeyboardButton(text='–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞', callback_data='commands_of_bot')],
        [types.InlineKeyboardButton(text='–°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É', callback_data='create_task'), types.InlineKeyboardButton(text='–ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞—á—É', callback_data='delete_task')],
        [types.InlineKeyboardButton(text='–°–ø–∏—Å–∫–∏ –∑–∞–¥–∞—á', callback_data='list_of_tasks'), types.InlineKeyboardButton(text='–ì—Ä—É–ø–ø—ã', callback_data='group_menu')]
    ]
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=kb)
    text_data = f'–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é, –Ω–∏–∂–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–¥–æ–±–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏'
    await callback.message.edit_caption(caption=text_data, reply_markup=keyboard)

@dp.callback_query( F.data == "group_menu")
async def f_group_menu(callback: types.CallbackQuery):
    kb = [
        [types.InlineKeyboardButton(text='–°–æ–∑–¥–∞—Ç—å –≥—Ä—É–ø–ø—É', callback_data='create_group'), types.InlineKeyboardButton(text='–ì—Ä—É–ø–ø—ã —Å –≤–∞–º–∏', callback_data='group_list')],
        [types.InlineKeyboardButton(text='–í–∞—à–∏ –≥—Ä—É–ø–ø—ã', callback_data='group_creator_list'), types.InlineKeyboardButton(text='–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥', callback_data='main_menu')]
          ]
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=kb)
    text_data = f'–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é –≥—Ä—É–ø–ø'
    await callback.message.edit_caption(caption=text_data, reply_markup=keyboard)

@dp.callback_query( F.data == 'list_of_tasks')
async def f_list_of_tasks(callback: types.CallbackQuery):
    kb = [
        [types.InlineKeyboardButton(text='–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏',callback_data='list_of_active_tasks'), types.InlineKeyboardButton(text='–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏',callback_data='list_of_completed_tasks')],
        [types.InlineKeyboardButton(text='–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥', callback_data='main_menu')]
    ]
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=kb)
    text_data=f'–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é —Å–ø–∏—Å–∫–æ–≤ –∑–∞–¥–∞—á'
    await callback.message.edit_caption(caption=text_data, reply_markup=keyboard)

@dp.callback_query( F.data == "list_of_completed_tasks")
async def f_list_of_completed_tasks(callback: types.CallbackQuery):
    kb = [[types.InlineKeyboardButton(text='–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥', callback_data='list_of_tasks')]]
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=kb)
    user_id = callback.from_user.id
    text_data = await list_of_completed_tasks(user_id)
    await callback.message.edit_caption(caption=html.escape(text_data), reply_markup=keyboard)


@dp.callback_query( F.data == 'list_of_active_tasks')
async def f_list_of_active_tasks(callback: types.CallbackQuery):
    kb = [[types.InlineKeyboardButton(text='–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥', callback_data='list_of_tasks')]]
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=kb)
    user_id = callback.from_user.id
    tasks = await get_active_task_list(user_id)
    text_data = await get_task_list(tasks)
    await callback.message.edit_caption(caption=html.escape(text_data), reply_markup=keyboard)

@dp.callback_query( F.data == 'create_task')
async def f_add_task(callback: types.CallbackQuery, state: FSMContext):
    kb = [[types.InlineKeyboardButton(text='–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥', callback_data='main_menu')]]
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=kb)
    text_data = "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å"
    await callback.message.edit_caption(caption=text_data,reply_markup=keyboard)
    await state.set_state(Addtask.addtask)

@dp.message(Addtask.addtask)
async def f_add_task_step_2(message: types.Message, state: FSMContext):
    await state.clear()
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text='–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥', callback_data='main_menu'), types.InlineKeyboardButton(text='–°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –∑–∞–¥–∞—á', callback_data='list_of_active_tasks')]
    ])
    msg = message.text
    user_id = message.from_user.id
    await add_task_to_database(msg, user_id)
    photo_data = 'AgACAgIAAxkBAAM-Z16z72hLzyrNHk2HcW1004sAAc77AAJw5zEbQijxSkRj7ont7ywxAQADAgADeQADNgQ'
    text_data = f'–í–∞—à–∞ –∑–∞–¥–∞—á–∞ <b>"{html.escape(msg)}"</b> –±—ã–ª–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞. –ß—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.'
    await message.answer_photo(photo=photo_data, caption=text_data, reply_markup=keyboard)

@dp.callback_query( F.data == 'delete_task')
async def f_del_task(callback: types.CallbackQuery, state: FSMContext):
    kb = [[types.InlineKeyboardButton(text='–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥', callback_data='main_menu')]]
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=kb)
    text_data = "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å"
    await callback.message.edit_caption(caption=text_data,reply_markup=keyboard)
    await state.set_state(Deltask.deltask)

@dp.message(Deltask.deltask)
async def f_del_task_step_2(message: types.Message, state: FSMContext):
    await state.clear()
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[[types.InlineKeyboardButton(text='–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥', callback_data='main_menu'), types.InlineKeyboardButton(text='–°–ø–∏—Å–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á.', callback_data='list_of_completed_tasks')]])
    msg = message.text
    task_id = await isvalid(msg, 'fdelete')
    if task_id:
        user_id = message.from_user.id
        text_data = await mark_task_in_db(task_id, user_id)
        if '/clist' in text_data:
            text_data = text_data[:-7]
            text_data += ". –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ"
    elif not task_id:
        text_data = f'–ß—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É –Ω—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –µ—ë –Ω–æ–º–µ—Ä, –≤—ã –∂–µ –≤–≤–µ–ª–∏: {msg}'
    photo_data = 'AgACAgIAAxkBAAM-Z16z72hLzyrNHk2HcW1004sAAc77AAJw5zEbQijxSkRj7ont7ywxAQADAgADeQADNgQ'
    await message.answer_photo(photo=photo_data, caption=html.escape(text_data), reply_markup=keyboard)

#=====================================================================================# –ö–æ–Ω–µ—Ü –∫–æ–¥–∞ –æ—Å–Ω–æ–≤–∞–Ω–Ω–æ–≥–æ –Ω–∞ F.Data



#=====================================================================================# –ù–∞—á–∞–ª–∞ –∫–æ–¥–∞ –æ—Å–Ω–æ–≤–∞–Ω–Ω–æ–≥–æ –Ω–∞ –∫–æ–º–∞–Ω–¥–∞—Ö

# –ö–æ–º–∞–Ω–¥—ã –≤ message_commands.py

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –≤ —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
@dp.message( Command( 'add' ) )
async def add_task(message: types.Message):
    msg = html.escape(message.text)
    user_id = message.from_user.id
    text_data = await add_task_to_list(msg, user_id)
    await message.answer(html.escape(text_data))

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á
@dp.message( Command ('list') )
async def get_list(message: types.Message):
    user_id = message.from_user.id
    tasks = await get_active_task_list(user_id)
    text_data = await get_task_list(tasks)
    await message.answer(html.escape(text_data))

# –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
@dp.message( Command( 'del' ) )
@dp.message( Command( 'complete' ) )
async def del_task(message: types.Message):
    msg = html.escape(message.text)
    user_id = message.from_user.id
    text_data = await delete_task_from_task_list(msg, user_id)
    await message.answer(html.escape(text_data))

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
@dp.message( Command ('Clist') )
@dp.message( Command ('clist') )
async def get_clist(message: types.Message):
    user_id = message.from_user.id
    text_data = await list_of_completed_tasks(user_id)
    await message.answer(html.escape(text_data))

#===================================================================================# –ö–æ–Ω–µ—Ü –∫–æ–¥–∞ –æ—Å–Ω–æ–≤–∞–Ω–Ω–æ–≥–æ –Ω–∞ –∫–æ–º–∞–Ω–¥–∞—Ö

#===================================================================================# –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å

@dp.message( Command ("admin"))
async def enter_admin_menu(message:types.Message):
    if await isAdmin(message.from_user.id):
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=[[types.InlineKeyboardButton(text='–í–æ–π—Ç–∏ –≤ –∞–¥–º–∏–Ω –º–µ–Ω—é', callback_data='admin_menu')]])
        photo_data, text_data = 'AgACAgIAAxkBAANAZ16z_DQyrRo2TsAd2JAaz1xasBkAArbnMRtSjflKegOH29qOjb4BAAMCAAN5AAM2BA', '–í–æ–π—Ç–∏ –≤ –ê–¥–º–∏–Ω-–º–µ–Ω—é'
        await message.answer_photo(photo=photo_data, caption=text_data, reply_markup=keyboard)
    else:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text='–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞', callback_data='commands_of_bot')]])
        text_data = await wrong_admin(message.from_user.id, message.text, message.from_user.username)
        photo_data = 'AgACAgIAAxkBAAM-Z16z72hLzyrNHk2HcW1004sAAc77AAJw5zEbQijxSkRj7ont7ywxAQADAgADeQADNgQ'
        await message.answer_photo(photo=photo_data, caption=html.escape(text_data), reply_markup=keyboard)

@dp.callback_query( F.data == 'admin_menu')
async def administration_menu(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    if await isAdmin(callback.from_user.id):
        kb = [[types.InlineKeyboardButton(text='–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data='admin_stats'), types.InlineKeyboardButton(text='–†–∞—Å—Å—ã–ª–∫–∞', callback_data='admin_news'), types.InlineKeyboardButton(text='–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞', callback_data='admin_stop')]]
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=kb)
        text_data = f'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä <b>{html.escape(callback.from_user.full_name)}</b>.'
        await callback.message.edit_caption(caption=text_data, reply_markup=keyboard)

@dp.callback_query( F.data == 'admin_stats')
async def administration_statistics(callback: types.CallbackQuery):
    if await isAdmin(callback.from_user.id):
        kb = [[types.InlineKeyboardButton(text='–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥', callback_data='admin_menu')]]
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=kb)
        await callback.message.edit_caption(caption=await get_admin_statistics(), reply_markup=keyboard)

@dp.callback_query( F.data == 'admin_news')
async def admin_newsletter(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    if await isAdmin(callback.from_user.id):
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=([[types.InlineKeyboardButton(text='–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥', callback_data='admin_menu')]]))
        await state.set_state(AdminNews.adm_newsletter)
        await callback.message.edit_caption(caption='–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –≤—Å–µ–æ–±—â–µ–π —Ä–∞—Å—Å—ã–ª–∫–∏',reply_markup=keyboard)

@dp.message(AdminNews.adm_newsletter)
async def admin_newsletter_step2(message: types.Message, state: FSMContext):
    await state.clear()
    if await isAdmin(message.from_user.id):
        good_try = 0
        all_ids = await get_all_users_id()
        for user_id in all_ids:
            try:
                await message.send_copy(user_id[0])
                good_try += 1
                await sleep(0.1)
            except:
                continue
        user_count = len(all_ids)
        await message.answer(f'–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {user_count}.\n–£–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å: {good_try}.\n–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å: {user_count - good_try}.')

@dp.callback_query( F.data == 'admin_stop')
async def admin_stop_bot(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    if await isAdmin(callback.from_user.id):
        kb = [
            [types.InlineKeyboardButton(text='–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥', callback_data='admin_menu')],
            [types.InlineKeyboardButton(text='–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞.', callback_data='server_stop')]
        ]
        keyboard = InlineKeyboardMarkup(inline_keyboard=kb)
        text_data = f'–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞? –î–∞–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å'
        await callback.message.edit_caption(caption=text_data, reply_markup=keyboard)

@dp.callback_query( F.data == 'server_stop')
async def server_stop_bot(callback: types.CallbackQuery):
    if await isAdmin(callback.from_user.id):
        await callback.message.edit_caption(caption='–ë–æ—Ç –±—É–¥–µ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥')
        await sleep(1)
        await callback.message.edit_caption(caption='<b>4</b>')
        await sleep(1)
        await callback.message.edit_caption(caption='<b>3</b>')
        await sleep(1)
        await callback.message.edit_caption(caption='<b>2</b>')
        await sleep(1)
        await callback.message.edit_caption(caption='<b>1</b>')
        await sleep(1)
        await callback.message.edit_caption(caption='<b>–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞.</b>')
        await exit()

#===================================================================================# –ö–æ–Ω–µ—Ü –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏

#===================================================================================# –ì—Ä—É–ø–ø—ã
class addGroup(StatesGroup):
    newGroup = State()


@dp.callback_query( F.data == 'create_group')
async def create_group(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(addGroup.newGroup)
    kb = [
        [types.InlineKeyboardButton(text='–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥', callback_data='group_menu')]
    ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=kb)
    text_data = '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã.'
    await callback.message.edit_caption(caption=text_data, reply_markup=keyboard)

@dp.message(addGroup.newGroup)
async def create_group_step2(message: types.Message, state: FSMContext):
    await state.clear()
    photo_data = 'AgACAgIAAxkBAAM-Z16z72hLzyrNHk2HcW1004sAAc77AAJw5zEbQijxSkRj7ont7ywxAQADAgADeQADNgQ'
    msg = await isvalidname(message.text, 'vgroup')
    if msg is False:
        text_data = '–í –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ø—É—Å–∫–∞—é—Ç—Å—è —Ä—É—Å—Å–∫–∏–µ –∏–ª–∏ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã, –∞ —Ç–∞–∫–∂–µ –ø—Ä–æ–±–µ–ª—ã'
        kb = [
            [types.InlineKeyboardButton(text='–í–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–æ–µ –∏–º—è', callback_data='create_group'),
             types.InlineKeyboardButton(text='–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥', callback_data='main_menu')]
        ]
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=kb)
        await message.answer_photo(photo=photo_data, caption=text_data, reply_markup=keyboard)
        return None
    if await isvalidname(msg, 'group'):
        kb = [
            [types.InlineKeyboardButton(text='–í–∞—à–∏ –≥—Ä—É–ø–ø—ã', callback_data='group_creator_list'),types.InlineKeyboardButton(text='–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥', callback_data='group_menu')]
        ]
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=kb)
        text_data = f'–ì—Ä—É–ø–ø–∞ —Å –∏–º–µ–Ω–µ–º "{html.escape(msg)}" –±—ã–ª–∞ —Å–æ–∑–¥–∞–Ω–∞.'
        await create_group_db(msg, message.from_user.id)
        await message.answer_photo(photo=photo_data, caption=text_data, reply_markup=keyboard)
    else:
        kb = [
            [types.InlineKeyboardButton(text='–í–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–æ–µ –∏–º—è', callback_data='create_group'),
             types.InlineKeyboardButton(text='–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥', callback_data='main_menu')]
        ]
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=kb)
        text_data = '–¢–∞–∫–∞—è –≥—Ä—É–ø–ø–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç'

        await message.answer_photo(photo=photo_data,caption=text_data, reply_markup=keyboard)

@dp.callback_query( F.data == 'group_creator_list')
async def get_group_creator_list_for_user(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    kb = await get_kb_for_creator_groups(callback.from_user.id)
    if kb == False:
        kb = [[types.InlineKeyboardButton(text='–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥', callback_data='group_menu')]]
        text_data = '–£ –≤–∞—Å –Ω–µ—Ç—É –≥—Ä—É–ø–ø'
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=kb)
        await callback.message.edit_caption(text=text_data, reply_markup=keyboard)
        return None
    else:
        text_data = '–í–∞—à–∏ –≥—Ä—É–ø–ø—ã'
        kb.append([types.InlineKeyboardButton(text='–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥', callback_data='group_menu')])
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=kb)
    await callback.message.edit_caption(text=text_data, reply_markup=keyboard)

@dp.callback_query( F.data == 'group_list')
async def get_group_list_for_user(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    kb = await get_kb_for_user_group(callback.from_user.id)
    if kb is False:
        text_data = '–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –≥—Ä—É–ø–ø–∞—Ö'
        kb = [
            [types.InlineKeyboardButton(text='–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥', callback_data='group_menu')]
        ]
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=kb)
        await callback.message.edit_caption(caption=html.escape(text_data), reply_markup=keyboard)
        return None
    else:
        text_data = '–í—ã —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –≥—Ä—É–ø–ø–∞—Ö -'
        kb.append([types.InlineKeyboardButton(text='–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥', callback_data='group_menu')])
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=kb)
        await callback.message.edit_caption(caption=html.escape(text_data), reply_markup=keyboard)
        return None

#===================================================================================# –ö–æ–Ω–µ—Ü –≥—Ä—É–ø–ø




# –ï—Å–ª–∏ –±—ã–ª–∞ –≤–≤–µ–¥–µ–Ω–∞ –Ω–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.
@dp.message(F.text[0] == '/')
async def wrong_command(message: types.Message):
    msg = message.text
    kb = [[types.InlineKeyboardButton(text='–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞', callback_data='commands_of_bot')]]
    text_data = f'–í–≤–µ–¥–µ–Ω–Ω–æ–π –≤–∞–º–∏ –∫–æ–º–∞–Ω–¥—ã "{msg}" - –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç\n–ù–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –≤—ã —É–≤–∏–¥–∏—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã'
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=kb)
    photo_data = 'AgACAgIAAxkBAAM-Z16z72hLzyrNHk2HcW1004sAAc77AAJw5zEbQijxSkRj7ont7ywxAQADAgADeQADNgQ'
    await message.answer_photo(photo=photo_data, caption=html.escape(text_data), reply_markup=keyboard)
# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    token_of_bot = await get_token()
    bot = Bot(token=token_of_bot, default=DefaultBotProperties(parse_mode=ParseMode.HTML)) # API –±–æ—Ç–∞
    await dp.start_polling(bot)

if __name__ == "__main__":
    run( main() )